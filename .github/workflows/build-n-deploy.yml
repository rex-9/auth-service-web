name: Build and Deploy

on:
  push:
    branches: [main, test]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist

  # deploy-staging:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/test'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts
  #         path: dist

  #     - name: Setup SSH
  #       uses: webfactory/ssh-agent@v0.9.0
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

  #     - name: Deploy to Staging
  #       env:
  #         STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
  #         STAGING_USER: ${{ secrets.STAGING_USER }}
  #         APP_PATH: ${{ secrets.APP_PATH }}
  #       run: |
  #         echo "Deploying to Staging Server"
  #         ssh $STAGING_USER@$STAGING_SERVER 'cd $APP_PATH && git pull origin test && npm install && npm run build && pm2 restart app'

  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts
  #         path: dist

  #     - name: Setup SSH
  #       uses: webfactory/ssh-agent@v0.9.0
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

  #     - name: Deploy to Production
  #       env:
  #         PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
  #         PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
  #         APP_PATH: ${{ secrets.APP_PATH }}
  #       run: |
  #         echo "Deploying to Production Server"
  #         ssh $PRODUCTION_USER@$PRODUCTION_SERVER 'cd $APP_PATH && git pull origin main && npm install && npm run build && pm2 restart app'

  # TODO: Read the explanation below to understand how this CI/CD pipeline works.
# Explanation
# Environment Variables:
# Use environment variables for server details and paths. This makes the workflow more flexible and secure.
# Store these variables in GitHub Secrets.

# Separate Jobs:
# Separate the build and deploy steps into different jobs (build, deploy-staging, and deploy-production).

# Upload and Download Artifacts:
# Use the actions/upload-artifact and actions/download-artifact actions to pass build artifacts between jobs. This ensures that the same build is deployed to both staging and production.

# SSH Setup:
# Use the webfactory/ssh-agent action to set up SSH keys securely.

# Setting Up Secrets
# Generate SSH keys on your local machine:
# > ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

# Add the public key to your staging and production servers:
# > ssh-copy-id user@staging-server
# > ssh-copy-id user@production-server

# Add the private key and other secrets to your GitHub repository:
# Go to your repository on GitHub.
# Click on Settings > Secrets > New repository secret.
# Add the following secrets:
# SSH_PRIVATE_KEY: Paste the contents of your private key.
# STAGING_SERVER: Your staging server address.
# STAGING_USER: Your staging server user.
# PRODUCTION_SERVER: Your production server address.
# PRODUCTION_USER: Your production server user.
# APP_PATH: The path to your application on the server.
